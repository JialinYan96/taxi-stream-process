/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TrajPointAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2616468848111644509L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrajPointAvro\",\"namespace\":\"model.avro\",\"fields\":[{\"name\":\"taxiId\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"lon\",\"type\":\"double\"},{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"direction\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"passenger\",\"type\":\"int\"},{\"name\":\"utc\",\"type\":\"long\"},{\"name\":\"cellID\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TrajPointAvro> ENCODER =
      new BinaryMessageEncoder<TrajPointAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TrajPointAvro> DECODER =
      new BinaryMessageDecoder<TrajPointAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TrajPointAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TrajPointAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TrajPointAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TrajPointAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TrajPointAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TrajPointAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TrajPointAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TrajPointAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence taxiId;
  @Deprecated public java.lang.CharSequence time;
  @Deprecated public double lon;
  @Deprecated public double lat;
  @Deprecated public double direction;
  @Deprecated public double speed;
  @Deprecated public int passenger;
  @Deprecated public long utc;
  @Deprecated public java.lang.CharSequence cellID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TrajPointAvro() {}

  /**
   * All-args constructor.
   * @param taxiId The new value for taxiId
   * @param time The new value for time
   * @param lon The new value for lon
   * @param lat The new value for lat
   * @param direction The new value for direction
   * @param speed The new value for speed
   * @param passenger The new value for passenger
   * @param utc The new value for utc
   * @param cellID The new value for cellID
   */
  public TrajPointAvro(java.lang.CharSequence taxiId, java.lang.CharSequence time, java.lang.Double lon, java.lang.Double lat, java.lang.Double direction, java.lang.Double speed, java.lang.Integer passenger, java.lang.Long utc, java.lang.CharSequence cellID) {
    this.taxiId = taxiId;
    this.time = time;
    this.lon = lon;
    this.lat = lat;
    this.direction = direction;
    this.speed = speed;
    this.passenger = passenger;
    this.utc = utc;
    this.cellID = cellID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taxiId;
    case 1: return time;
    case 2: return lon;
    case 3: return lat;
    case 4: return direction;
    case 5: return speed;
    case 6: return passenger;
    case 7: return utc;
    case 8: return cellID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taxiId = (java.lang.CharSequence)value$; break;
    case 1: time = (java.lang.CharSequence)value$; break;
    case 2: lon = (java.lang.Double)value$; break;
    case 3: lat = (java.lang.Double)value$; break;
    case 4: direction = (java.lang.Double)value$; break;
    case 5: speed = (java.lang.Double)value$; break;
    case 6: passenger = (java.lang.Integer)value$; break;
    case 7: utc = (java.lang.Long)value$; break;
    case 8: cellID = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'taxiId' field.
   * @return The value of the 'taxiId' field.
   */
  public java.lang.CharSequence getTaxiId() {
    return taxiId;
  }


  /**
   * Sets the value of the 'taxiId' field.
   * @param value the value to set.
   */
  public void setTaxiId(java.lang.CharSequence value) {
    this.taxiId = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.CharSequence getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'lon' field.
   * @return The value of the 'lon' field.
   */
  public double getLon() {
    return lon;
  }


  /**
   * Sets the value of the 'lon' field.
   * @param value the value to set.
   */
  public void setLon(double value) {
    this.lon = value;
  }

  /**
   * Gets the value of the 'lat' field.
   * @return The value of the 'lat' field.
   */
  public double getLat() {
    return lat;
  }


  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public double getDirection() {
    return direction;
  }


  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(double value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public double getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'passenger' field.
   * @return The value of the 'passenger' field.
   */
  public int getPassenger() {
    return passenger;
  }


  /**
   * Sets the value of the 'passenger' field.
   * @param value the value to set.
   */
  public void setPassenger(int value) {
    this.passenger = value;
  }

  /**
   * Gets the value of the 'utc' field.
   * @return The value of the 'utc' field.
   */
  public long getUtc() {
    return utc;
  }


  /**
   * Sets the value of the 'utc' field.
   * @param value the value to set.
   */
  public void setUtc(long value) {
    this.utc = value;
  }

  /**
   * Gets the value of the 'cellID' field.
   * @return The value of the 'cellID' field.
   */
  public java.lang.CharSequence getCellID() {
    return cellID;
  }


  /**
   * Sets the value of the 'cellID' field.
   * @param value the value to set.
   */
  public void setCellID(java.lang.CharSequence value) {
    this.cellID = value;
  }

  /**
   * Creates a new TrajPointAvro RecordBuilder.
   * @return A new TrajPointAvro RecordBuilder
   */
  public static model.avro.TrajPointAvro.Builder newBuilder() {
    return new model.avro.TrajPointAvro.Builder();
  }

  /**
   * Creates a new TrajPointAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TrajPointAvro RecordBuilder
   */
  public static model.avro.TrajPointAvro.Builder newBuilder(model.avro.TrajPointAvro.Builder other) {
    if (other == null) {
      return new model.avro.TrajPointAvro.Builder();
    } else {
      return new model.avro.TrajPointAvro.Builder(other);
    }
  }

  /**
   * Creates a new TrajPointAvro RecordBuilder by copying an existing TrajPointAvro instance.
   * @param other The existing instance to copy.
   * @return A new TrajPointAvro RecordBuilder
   */
  public static model.avro.TrajPointAvro.Builder newBuilder(model.avro.TrajPointAvro other) {
    if (other == null) {
      return new model.avro.TrajPointAvro.Builder();
    } else {
      return new model.avro.TrajPointAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for TrajPointAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrajPointAvro>
    implements org.apache.avro.data.RecordBuilder<TrajPointAvro> {

    private java.lang.CharSequence taxiId;
    private java.lang.CharSequence time;
    private double lon;
    private double lat;
    private double direction;
    private double speed;
    private int passenger;
    private long utc;
    private java.lang.CharSequence cellID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(model.avro.TrajPointAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taxiId)) {
        this.taxiId = data().deepCopy(fields()[0].schema(), other.taxiId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lon)) {
        this.lon = data().deepCopy(fields()[2].schema(), other.lon);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lat)) {
        this.lat = data().deepCopy(fields()[3].schema(), other.lat);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.direction)) {
        this.direction = data().deepCopy(fields()[4].schema(), other.direction);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.speed)) {
        this.speed = data().deepCopy(fields()[5].schema(), other.speed);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.passenger)) {
        this.passenger = data().deepCopy(fields()[6].schema(), other.passenger);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.utc)) {
        this.utc = data().deepCopy(fields()[7].schema(), other.utc);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.cellID)) {
        this.cellID = data().deepCopy(fields()[8].schema(), other.cellID);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing TrajPointAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(model.avro.TrajPointAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.taxiId)) {
        this.taxiId = data().deepCopy(fields()[0].schema(), other.taxiId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lon)) {
        this.lon = data().deepCopy(fields()[2].schema(), other.lon);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lat)) {
        this.lat = data().deepCopy(fields()[3].schema(), other.lat);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.direction)) {
        this.direction = data().deepCopy(fields()[4].schema(), other.direction);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.speed)) {
        this.speed = data().deepCopy(fields()[5].schema(), other.speed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.passenger)) {
        this.passenger = data().deepCopy(fields()[6].schema(), other.passenger);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.utc)) {
        this.utc = data().deepCopy(fields()[7].schema(), other.utc);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cellID)) {
        this.cellID = data().deepCopy(fields()[8].schema(), other.cellID);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'taxiId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxiId() {
      return taxiId;
    }


    /**
      * Sets the value of the 'taxiId' field.
      * @param value The value of 'taxiId'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setTaxiId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.taxiId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taxiId' field has been set.
      * @return True if the 'taxiId' field has been set, false otherwise.
      */
    public boolean hasTaxiId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taxiId' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearTaxiId() {
      taxiId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lon' field.
      * @return The value.
      */
    public double getLon() {
      return lon;
    }


    /**
      * Sets the value of the 'lon' field.
      * @param value The value of 'lon'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setLon(double value) {
      validate(fields()[2], value);
      this.lon = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lon' field has been set.
      * @return True if the 'lon' field has been set, false otherwise.
      */
    public boolean hasLon() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lon' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearLon() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lat' field.
      * @return The value.
      */
    public double getLat() {
      return lat;
    }


    /**
      * Sets the value of the 'lat' field.
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setLat(double value) {
      validate(fields()[3], value);
      this.lat = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lat' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearLat() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public double getDirection() {
      return direction;
    }


    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setDirection(double value) {
      validate(fields()[4], value);
      this.direction = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearDirection() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public double getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setSpeed(double value) {
      validate(fields()[5], value);
      this.speed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearSpeed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'passenger' field.
      * @return The value.
      */
    public int getPassenger() {
      return passenger;
    }


    /**
      * Sets the value of the 'passenger' field.
      * @param value The value of 'passenger'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setPassenger(int value) {
      validate(fields()[6], value);
      this.passenger = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'passenger' field has been set.
      * @return True if the 'passenger' field has been set, false otherwise.
      */
    public boolean hasPassenger() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'passenger' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearPassenger() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'utc' field.
      * @return The value.
      */
    public long getUtc() {
      return utc;
    }


    /**
      * Sets the value of the 'utc' field.
      * @param value The value of 'utc'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setUtc(long value) {
      validate(fields()[7], value);
      this.utc = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'utc' field has been set.
      * @return True if the 'utc' field has been set, false otherwise.
      */
    public boolean hasUtc() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'utc' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearUtc() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'cellID' field.
      * @return The value.
      */
    public java.lang.CharSequence getCellID() {
      return cellID;
    }


    /**
      * Sets the value of the 'cellID' field.
      * @param value The value of 'cellID'.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder setCellID(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.cellID = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'cellID' field has been set.
      * @return True if the 'cellID' field has been set, false otherwise.
      */
    public boolean hasCellID() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'cellID' field.
      * @return This builder.
      */
    public model.avro.TrajPointAvro.Builder clearCellID() {
      cellID = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TrajPointAvro build() {
      try {
        TrajPointAvro record = new TrajPointAvro();
        record.taxiId = fieldSetFlags()[0] ? this.taxiId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lon = fieldSetFlags()[2] ? this.lon : (java.lang.Double) defaultValue(fields()[2]);
        record.lat = fieldSetFlags()[3] ? this.lat : (java.lang.Double) defaultValue(fields()[3]);
        record.direction = fieldSetFlags()[4] ? this.direction : (java.lang.Double) defaultValue(fields()[4]);
        record.speed = fieldSetFlags()[5] ? this.speed : (java.lang.Double) defaultValue(fields()[5]);
        record.passenger = fieldSetFlags()[6] ? this.passenger : (java.lang.Integer) defaultValue(fields()[6]);
        record.utc = fieldSetFlags()[7] ? this.utc : (java.lang.Long) defaultValue(fields()[7]);
        record.cellID = fieldSetFlags()[8] ? this.cellID : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TrajPointAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TrajPointAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TrajPointAvro>
    READER$ = (org.apache.avro.io.DatumReader<TrajPointAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.taxiId);

    out.writeString(this.time);

    out.writeDouble(this.lon);

    out.writeDouble(this.lat);

    out.writeDouble(this.direction);

    out.writeDouble(this.speed);

    out.writeInt(this.passenger);

    out.writeLong(this.utc);

    out.writeString(this.cellID);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.taxiId = in.readString(this.taxiId instanceof Utf8 ? (Utf8)this.taxiId : null);

      this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);

      this.lon = in.readDouble();

      this.lat = in.readDouble();

      this.direction = in.readDouble();

      this.speed = in.readDouble();

      this.passenger = in.readInt();

      this.utc = in.readLong();

      this.cellID = in.readString(this.cellID instanceof Utf8 ? (Utf8)this.cellID : null);

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.taxiId = in.readString(this.taxiId instanceof Utf8 ? (Utf8)this.taxiId : null);
          break;

        case 1:
          this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);
          break;

        case 2:
          this.lon = in.readDouble();
          break;

        case 3:
          this.lat = in.readDouble();
          break;

        case 4:
          this.direction = in.readDouble();
          break;

        case 5:
          this.speed = in.readDouble();
          break;

        case 6:
          this.passenger = in.readInt();
          break;

        case 7:
          this.utc = in.readLong();
          break;

        case 8:
          this.cellID = in.readString(this.cellID instanceof Utf8 ? (Utf8)this.cellID : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










